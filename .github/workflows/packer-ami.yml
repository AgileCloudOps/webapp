name: Build custom AMI
on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build packer AMI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Compress codebase
        run:  touch webapp.tar.gz && tar --exclude=webapp.tar.gz --exclude='.git' --exclude='.github' --exclude='.vscode' --exclude='node_modules' --exclude='logs' --exclude="package-lock.json" --exclude=".env" -zcvf webapp.tar.gz .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Setup packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run `packer init`
        id: init
        run: "packer init scripts/aws-ami.pkr.hcl"

      - name: Run `packer validate`
        id: validate
        run: "packer validate scripts/aws-ami.pkr.hcl"

      # - name: Build `packer build`
      #   id: build
      #   run: "packer build -var 'ami_users=[${{ secrets.DEMO_ACCOUNT_ID }}]' scripts/aws-ami.pkr.hcl"

      - name: Reconfigure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      
      - name: Create new launch template version and refresh
        id: deploy
        run: |
          image_id=$(aws ec2 describe-images --owners '390646828676' --filters 'Name=name,Values=thabes*' --query 'sort_by(Images, &CreationDate)[-1].[ImageId]' --output 'text')
          echo '"'$image_id'"'
          aws ec2 create-launch-template-version --launch-template-name 'asg_launch_config' --source-version '$Latest' --launch-template-data "{\"ImageId\":\"$image_id\"}"
          aws autoscaling start-instance-refresh --auto-scaling-group-name 'csye6225-asg-thabes' --desired-configuration '{"LaunchTemplate": {"LaunchTemplateName": "asg_launch_config", "Version": "$Latest" }}'

# aws ec2 describe-images --owners '390646828676' --filters 'Name=name,Values=thabes*' --query 'sort_by(Images, &CreationDate)[-1].[ImageId]' --output 'text' --profile prod
# aws ec2 create-launch-template-version --launch-template-name 'asg_launch_config' --source-version '$Latest' --launch-template-data '{"ImageId":"ami-03e7c3d7ccb7d11da"}' --profile prod
# aws autoscaling start-instance-refresh --auto-scaling-group-name 'csye6225-asg-thabes' --profile prod 

#image_id=$(aws ec2 describe-images --owners '390646828676' --filters 'Name=name,Values=thabes*' --query 'sort_by(Images, &CreationDate)[-1].[ImageId]' --output 'text' --profile prod) 
#aws ec2 create-launch-template-version --launch-template-name 'asg_launch_config' --source-version '$Latest' --launch-template-data "{\"ImageId\":\"$image_id\"}" --profile prod
# aws autoscaling start-instance-refresh --auto-scaling-group-name 'csye6225-asg-thabes' --profile prod 

